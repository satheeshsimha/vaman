
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 10.2.1-6 -fPIC -Os)


-- Parsing `/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v
Parsing Verilog input from `/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v' to AST representation.
Generating RTLIL representation for module `\helloworldfpga'.
Successfully finished Verilog frontend.

-- Running command `tcl /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: helloworldfpga      
Automatically selected helloworldfpga as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \helloworldfpga

4.3.3. Analyzing design hierarchy..
Top module:  \helloworldfpga
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$48 in module MULT.
Marked 2 switch rules as full_case in process $proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$30 in module Q_FRAG.
Marked 1 switch rules as full_case in process $proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:0$8 in module helloworldfpga.
Marked 2 switch rules as full_case in process $proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:57$3 in module helloworldfpga.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 7 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$31'.
  Set init value: \QZ = 1'0
Found init rule in `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:22$13'.
  Set init value: \num = 8'00000000

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$30'.
Found async reset \QRT in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$30'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$48'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$31'.
Creating decoders for process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$30'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:22$13'.
Creating decoders for process `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:0$8'.
     1/1: $1$func$\gpio_out$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:77$2$\gpio_out[6:0]$12
Creating decoders for process `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:57$3'.
     1/3: $2\num[7:0]
     2/3: $1\num[7:0]
     3/3: $1\delay[26:0]

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\helloworldfpga.$func$\gpio_out$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:77$1$\gpio_out' from process `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:0$8'.
No latch inferred for signal `\helloworldfpga.$func$\gpio_out$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:77$2$\gpio_out' from process `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:0$8'.
No latch inferred for signal `\helloworldfpga.$func$\gpio_out$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:77$2$\num_i' from process `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:0$8'.

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$48'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$30'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$920' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\helloworldfpga.\delay' using process `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:57$3'.
  created $dff cell `$procdff$921' with positive edge clock.
Creating register for signal `\helloworldfpga.\num' using process `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:57$3'.
  created $dff cell `$procdff$922' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$48'.
Removing empty process `MULT.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$48'.
Removing empty process `Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$31'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$30'.
Removing empty process `Q_FRAG.$proc$/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$30'.
Removing empty process `helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:22$13'.
Found and cleaned up 1 empty switch in `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:0$8'.
Removing empty process `helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:0$8'.
Found and cleaned up 2 empty switches in `\helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:57$3'.
Removing empty process `helloworldfpga.$proc$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:57$3'.
Cleaned up 8 empty switches.

4.5. Executing FLATTEN pass (flatten design).

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~1 debug messages>

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.10.9. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.13. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell helloworldfpga.$add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:59$4 ($add).
Removed top 5 bits (of 32) from port Y of cell helloworldfpga.$add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:59$4 ($add).
Removed top 7 bits (of 32) from port B of cell helloworldfpga.$gt$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:62$5 ($gt).
Removed top 31 bits (of 32) from port B of cell helloworldfpga.$add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:65$6 ($add).
Removed top 24 bits (of 32) from port Y of cell helloworldfpga.$add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:65$6 ($add).
Removed top 28 bits (of 32) from port B of cell helloworldfpga.$gt$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:67$7 ($gt).
Removed top 3 bits (of 7) from port B of cell helloworldfpga.$procmux$889_CMP0 ($eq).
Removed top 3 bits (of 7) from port B of cell helloworldfpga.$procmux$890_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell helloworldfpga.$procmux$891_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell helloworldfpga.$procmux$892_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell helloworldfpga.$procmux$893_CMP0 ($eq).
Removed top 4 bits (of 7) from port B of cell helloworldfpga.$procmux$894_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell helloworldfpga.$procmux$895_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell helloworldfpga.$procmux$896_CMP0 ($eq).
Removed top 6 bits (of 7) from port B of cell helloworldfpga.$procmux$897_CMP0 ($eq).
Removed top 5 bits (of 32) from wire helloworldfpga.$add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:59$4_Y.

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 2 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module helloworldfpga:
  creating $macc model for $add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:59$4 ($add).
  creating $macc model for $add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:65$6 ($add).
  creating $alu model for $macc $add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:65$6.
  creating $alu model for $macc $add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:59$4.
  creating $alu model for $gt$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:62$5 ($gt): new $alu
  creating $alu model for $gt$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:67$7 ($gt): new $alu
  creating $alu cell for $gt$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:67$7: $auto$alumacc.cc:485:replace_alu$956
  creating $alu cell for $gt$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:62$5: $auto$alumacc.cc:485:replace_alu$961
  creating $alu cell for $add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:59$4: $auto$alumacc.cc:485:replace_alu$966
  creating $alu cell for $add$/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/decade_counter.v:65$6: $auto$alumacc.cc:485:replace_alu$969
  created 4 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~3 debug messages>

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 2 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $auto$alumacc.cc:485:replace_alu$956
cell type $auto$alumacc.cc:485:replace_alu$961
cell type $auto$alumacc.cc:485:replace_alu$966
cell type $auto$alumacc.cc:485:replace_alu$969
cell type $auto$pmuxtree.cc:35:or_generator$934
cell type $auto$pmuxtree.cc:37:or_generator$946
cell type $auto$pmuxtree.cc:37:or_generator$950
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$928
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$930
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$932
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$936
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$938
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$940
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$942
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$944
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$948
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$952
cell type $procdff$921
cell type $procdff$922
cell type $procmux$889_CMP0
cell type $procmux$890_CMP0
cell type $procmux$891_CMP0
cell type $procmux$892_CMP0
cell type $procmux$893_CMP0
cell type $procmux$894_CMP0
cell type $procmux$895_CMP0
cell type $procmux$896_CMP0
cell type $procmux$897_CMP0
cell type $procmux$898_CMP0
cell type $procmux$900
cell type $procmux$903
cell type $procmux$906
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:235: Warning: Identifier `\GND' is implicitly declared.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:236: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:538: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:824: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:998: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:1249: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~1 debug messages>

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$928:
      Old ports: A=7'0000000, B=7'0000100, Y=$auto$rtlil.cc:2037:Mux$929
      New ports: A=1'0, B=1'1, Y=$auto$rtlil.cc:2037:Mux$929 [2]
      New connections: { $auto$rtlil.cc:2037:Mux$929 [6:3] $auto$rtlil.cc:2037:Mux$929 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$930:
      Old ports: A=7'0100100, B=7'0100000, Y=$auto$rtlil.cc:2037:Mux$931
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2037:Mux$931 [2]
      New connections: { $auto$rtlil.cc:2037:Mux$931 [6:3] $auto$rtlil.cc:2037:Mux$931 [1:0] } = 6'010000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$938:
      Old ports: A=7'0010010, B=7'0000110, Y=$auto$rtlil.cc:2037:Mux$939
      New ports: A=2'10, B=2'01, Y={ $auto$rtlil.cc:2037:Mux$939 [4] $auto$rtlil.cc:2037:Mux$939 [2] }
      New connections: { $auto$rtlil.cc:2037:Mux$939 [6:5] $auto$rtlil.cc:2037:Mux$939 [3] $auto$rtlil.cc:2037:Mux$939 [1:0] } = 5'00010
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$942:
      Old ports: A=7'1111111, B=7'0000001, Y=$auto$rtlil.cc:2037:Mux$943
      New ports: A=1'1, B=1'0, Y=$auto$rtlil.cc:2037:Mux$943 [1]
      New connections: { $auto$rtlil.cc:2037:Mux$943 [6:2] $auto$rtlil.cc:2037:Mux$943 [0] } = { $auto$rtlil.cc:2037:Mux$943 [1] $auto$rtlil.cc:2037:Mux$943 [1] $auto$rtlil.cc:2037:Mux$943 [1] $auto$rtlil.cc:2037:Mux$943 [1] $auto$rtlil.cc:2037:Mux$943 [1] 1'1 }
  Optimizing cells in module \helloworldfpga.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$932:
      Old ports: A=$auto$rtlil.cc:2037:Mux$931, B=7'0001111, Y=$auto$rtlil.cc:2037:Mux$933
      New ports: A={ 1'1 $auto$rtlil.cc:2037:Mux$931 [2] 1'0 }, B=3'011, Y={ $auto$rtlil.cc:2037:Mux$933 [5] $auto$rtlil.cc:2037:Mux$933 [2] $auto$rtlil.cc:2037:Mux$933 [0] }
      New connections: { $auto$rtlil.cc:2037:Mux$933 [6] $auto$rtlil.cc:2037:Mux$933 [4:3] $auto$rtlil.cc:2037:Mux$933 [1] } = { 2'00 $auto$rtlil.cc:2037:Mux$933 [0] $auto$rtlil.cc:2037:Mux$933 [0] }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$940:
      Old ports: A=$auto$rtlil.cc:2037:Mux$939, B=7'1001100, Y=$auto$rtlil.cc:2037:Mux$941
      New ports: A={ $auto$rtlil.cc:2037:Mux$939 [4] 1'0 $auto$rtlil.cc:2037:Mux$939 [2] 1'1 }, B=4'0110, Y=$auto$rtlil.cc:2037:Mux$941 [4:1]
      New connections: { $auto$rtlil.cc:2037:Mux$941 [6:5] $auto$rtlil.cc:2037:Mux$941 [0] } = { $auto$rtlil.cc:2037:Mux$941 [3] 2'00 }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$944:
      Old ports: A=$auto$rtlil.cc:2037:Mux$943, B=7'1001111, Y=$auto$rtlil.cc:2037:Mux$945
      New ports: A={ $auto$rtlil.cc:2037:Mux$943 [1] $auto$rtlil.cc:2037:Mux$943 [1] }, B=2'01, Y={ $auto$rtlil.cc:2037:Mux$945 [4] $auto$rtlil.cc:2037:Mux$945 [1] }
      New connections: { $auto$rtlil.cc:2037:Mux$945 [6:5] $auto$rtlil.cc:2037:Mux$945 [3:2] $auto$rtlil.cc:2037:Mux$945 [0] } = { $auto$rtlil.cc:2037:Mux$945 [1] $auto$rtlil.cc:2037:Mux$945 [4] $auto$rtlil.cc:2037:Mux$945 [1] $auto$rtlil.cc:2037:Mux$945 [1] 1'1 }
  Optimizing cells in module \helloworldfpga.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$936:
      Old ports: A=$auto$rtlil.cc:2037:Mux$933, B={ 4'0000 $auto$rtlil.cc:2037:Mux$929 [2] 2'00 }, Y=$auto$rtlil.cc:2037:Mux$937
      New ports: A={ $auto$rtlil.cc:2037:Mux$933 [5] $auto$rtlil.cc:2037:Mux$933 [2] $auto$rtlil.cc:2037:Mux$933 [0] }, B={ 1'0 $auto$rtlil.cc:2037:Mux$929 [2] 1'0 }, Y={ $auto$rtlil.cc:2037:Mux$937 [5] $auto$rtlil.cc:2037:Mux$937 [2] $auto$rtlil.cc:2037:Mux$937 [0] }
      New connections: { $auto$rtlil.cc:2037:Mux$937 [6] $auto$rtlil.cc:2037:Mux$937 [4:3] $auto$rtlil.cc:2037:Mux$937 [1] } = { 2'00 $auto$rtlil.cc:2037:Mux$937 [0] $auto$rtlil.cc:2037:Mux$937 [0] }
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$948:
      Old ports: A=$auto$rtlil.cc:2037:Mux$945, B=$auto$rtlil.cc:2037:Mux$941, Y=$auto$rtlil.cc:2037:Mux$949
      New ports: A={ $auto$rtlil.cc:2037:Mux$945 [4] $auto$rtlil.cc:2037:Mux$945 [4] $auto$rtlil.cc:2037:Mux$945 [1] $auto$rtlil.cc:2037:Mux$945 [1] $auto$rtlil.cc:2037:Mux$945 [1] 1'1 }, B={ 1'0 $auto$rtlil.cc:2037:Mux$941 [4:1] 1'0 }, Y=$auto$rtlil.cc:2037:Mux$949 [5:0]
      New connections: $auto$rtlil.cc:2037:Mux$949 [6] = $auto$rtlil.cc:2037:Mux$949 [3]
  Optimizing cells in module \helloworldfpga.
Performed a total of 9 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.30.9. Rerunning OPT passes. (Maybe there is more to do..)

4.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.30.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.30.16. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/techmap.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=25\B_WIDTH=27\Y_WIDTH=27 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=27 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=7 for cells of type $lcu.
No more expansions possible.
<suppressed ~725 debug messages>

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~436 debug messages>

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
<suppressed ~159 debug messages>
Removed a total of 53 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 101 unused cells and 301 unused wires.
<suppressed ~102 debug messages>

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module helloworldfpga..
  Treeifying 63 MUXes:
    Found tree with 1 MUXes at root \a.
    Found tree with 3 MUXes at root \b.
    Found tree with 3 MUXes at root \c.
    Found tree with 1 MUXes at root \d.
    Found tree with 5 MUXes at root \e.
    Found tree with 2 MUXes at root \f.
    Found tree with 1 MUXes at root \g.
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$937 [3].
    Found tree with 1 MUXes at root $0\delay[26:0] [0].
    Found tree with 1 MUXes at root $0\delay[26:0] [1].
    Found tree with 1 MUXes at root $0\delay[26:0] [2].
    Found tree with 1 MUXes at root $0\delay[26:0] [3].
    Found tree with 1 MUXes at root $0\delay[26:0] [4].
    Found tree with 1 MUXes at root $0\delay[26:0] [5].
    Found tree with 1 MUXes at root $0\delay[26:0] [6].
    Found tree with 1 MUXes at root $0\delay[26:0] [7].
    Found tree with 1 MUXes at root $0\delay[26:0] [8].
    Found tree with 1 MUXes at root $0\delay[26:0] [9].
    Found tree with 1 MUXes at root $0\delay[26:0] [10].
    Found tree with 1 MUXes at root $0\delay[26:0] [11].
    Found tree with 1 MUXes at root $0\delay[26:0] [12].
    Found tree with 1 MUXes at root $0\delay[26:0] [13].
    Found tree with 1 MUXes at root $0\delay[26:0] [14].
    Found tree with 1 MUXes at root $0\delay[26:0] [15].
    Found tree with 1 MUXes at root $0\delay[26:0] [16].
    Found tree with 1 MUXes at root $0\delay[26:0] [17].
    Found tree with 1 MUXes at root $0\delay[26:0] [18].
    Found tree with 1 MUXes at root $0\delay[26:0] [19].
    Found tree with 1 MUXes at root $0\delay[26:0] [20].
    Found tree with 1 MUXes at root $0\delay[26:0] [21].
    Found tree with 1 MUXes at root $0\delay[26:0] [22].
    Found tree with 1 MUXes at root $0\delay[26:0] [23].
    Found tree with 1 MUXes at root $0\delay[26:0] [24].
    Found tree with 1 MUXes at root $0\delay[26:0] [25].
    Found tree with 1 MUXes at root $0\delay[26:0] [26].
    Found tree with 2 MUXes at root $0\num[7:0] [0].
    Found tree with 1 MUXes at root $0\num[7:0] [1].
    Found tree with 1 MUXes at root $0\num[7:0] [2].
    Found tree with 1 MUXes at root $0\num[7:0] [3].
    Found tree with 1 MUXes at root $0\num[7:0] [4].
    Found tree with 1 MUXes at root $0\num[7:0] [5].
    Found tree with 1 MUXes at root $0\num[7:0] [6].
    Found tree with 1 MUXes at root $0\num[7:0] [7].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$945 [5].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$945 [6].
    Found tree with 1 MUXes at root $auto$rtlil.cc:2037:Mux$949 [6].
    Found tree with 1 MUXes at root $auto$alumacc.cc:485:replace_alu$956.B [0].
    Found tree with 1 MUXes at root $auto$alumacc.cc:485:replace_alu$956.B [1].
    Found tree with 1 MUXes at root $auto$alumacc.cc:485:replace_alu$956.B [2].
    Found tree with 1 MUXes at root $auto$alumacc.cc:485:replace_alu$956.B [3].
    Found tree with 1 MUXes at root $auto$alumacc.cc:485:replace_alu$956.B [4].
    Found tree with 1 MUXes at root $auto$alumacc.cc:485:replace_alu$956.B [5].
    Found tree with 1 MUXes at root $auto$alumacc.cc:485:replace_alu$956.B [6].
    Finished treeification: Found 53 trees.
  Covering trees:
    Replaced tree at \a: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \b: 0 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \c: 3 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \d: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \e: 2 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \f: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \g: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$937 [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\delay[26:0] [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[7:0] [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[7:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[7:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[7:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[7:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[7:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[7:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\num[7:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$945 [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$945 [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$rtlil.cc:2037:Mux$949 [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$alumacc.cc:485:replace_alu$956.B [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$alumacc.cc:485:replace_alu$956.B [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$alumacc.cc:485:replace_alu$956.B [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$alumacc.cc:485:replace_alu$956.B [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$alumacc.cc:485:replace_alu$956.B [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$alumacc.cc:485:replace_alu$956.B [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $auto$alumacc.cc:485:replace_alu$956.B [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 1 decoder MUXes.
<suppressed ~1604 debug messages>

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.35. Executing OPT pass (performing simple optimizations).

4.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.35.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

4.35.5. Finished fast OPT passes.

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.38. Executing OPT_RMDFF pass (remove dff with constant values).

4.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.40. Executing OPT pass (performing simple optimizations).

4.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.40.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.40.9. Finished OPT passes. (There is nothing left to do.)

4.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.42. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module helloworldfpga:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$2435 for $0\num[7:0] [0] -> \num [0].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1376.

4.43. Executing TECHMAP pass (map to technology primitives).

4.43.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.43.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~35 debug messages>

4.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~3 debug messages>

4.45. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.48. Executing OPT_RMDFF pass (remove dff with constant values).

4.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 109 unused wires.
<suppressed ~1 debug messages>

4.50. Executing OPT pass (performing simple optimizations).

4.50.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.50.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.50.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \helloworldfpga..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.50.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \helloworldfpga.
Performed a total of 0 changes.

4.50.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\helloworldfpga'.
Removed a total of 0 cells.

4.50.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.50.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..

4.50.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.

4.50.9. Finished OPT passes. (There is nothing left to do.)

4.51. Executing TECHMAP pass (map to technology primitives).

4.51.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.51.2. Continuing TECHMAP pass.
No more expansions possible.

4.52. Executing ABC pass (technology mapping using ABC).

4.52.1. Extracting gate netlist of module `\helloworldfpga' to `<abc-temp-dir>/input.blif'..
Extracted 280 gates and 317 wires to a netlist network with 35 inputs and 49 outputs.

4.52.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.52.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      102
ABC RESULTS:        internal signals:      233
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       49
Removing temp directory.

4.53. Executing TECHMAP pass (map to technology primitives).

4.53.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.53.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 193 unused wires.

4.54. Executing TECHMAP pass (map to technology primitives).

4.54.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.54.2. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.54.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template \$_MUX4_ for cells of type $_MUX4_.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
No more expansions possible.
<suppressed ~559 debug messages>
Removed 0 unused cells and 220 unused wires.

4.55. Executing Quicklogic_EQN pass (calculate equations for luts).

4.56. Updated 102 of LUT* elements with equation.

4.57. Executing AUTONAME pass.
Renamed 1122 objects in module helloworldfpga (27 iterations).
<suppressed ~209 debug messages>

4.58. Executing HIERARCHY pass (managing design hierarchy).

4.58.1. Analyzing design hierarchy..
Top module:  \helloworldfpga

4.58.2. Analyzing design hierarchy..
Top module:  \helloworldfpga
Removed 0 unused modules.

4.59. Printing statistics.

=== helloworldfpga ===

   Number of wires:                 80
   Number of wire bits:            146
   Number of public wires:          80
   Number of public wire bits:     146
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                140
     LUT1                            1
     LUT2                           42
     LUT3                           39
     LUT4                           20
     dff                            34
     dffe                            1
     mux4x0                          2
     qlal4s3b_cell_macro             1

4.60. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
Warning: Wire helloworldfpga.num has an unprocessed 'init' attribute.
found and reported 1 problems.

4.61. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on helloworldfpga.clk[0].

4.62. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port helloworldfpga.a using outpad.
Mapping port helloworldfpga.b using outpad.
Mapping port helloworldfpga.c using outpad.
Mapping port helloworldfpga.d using outpad.
Mapping port helloworldfpga.e using outpad.
Mapping port helloworldfpga.f using outpad.
Mapping port helloworldfpga.g using outpad.

4.63. Executing SPLITNETS pass (splitting up multi-bit signals).

4.64. Executing SETUNDEF pass (replace undef values with defined constants).

4.65. Executing HILOMAP pass (mapping to constant drivers).

4.66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 7 unused wires.
<suppressed ~7 debug messages>

4.67. Executing CHECK pass (checking for obvious problems).
checking module helloworldfpga..
found and reported 0 problems.

5. Printing statistics.

=== helloworldfpga ===

   Number of wires:                148
   Number of wire bits:            148
   Number of public wires:         141
   Number of public wire bits:     141
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                148
     LUT1                            1
     LUT2                           42
     LUT3                           39
     LUT4                           20
     dff                            34
     dffe                            1
     logic_0                         1
     mux4x0                          2
     outpad                          7
     qlal4s3b_cell_macro             1

Loading PCF from '/sdcard/Download/vaman/vaman/fpga/sevenseg/codes/loop/pygmy.pcf'...
Loading pinmap CSV from '/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  outpad     | a          | 3          | X12Y3    | BIDIR    | $iopadmap$helloworldfpga.a
  outpad     | b          | 64         | X14Y3    | BIDIR    | $iopadmap$helloworldfpga.b
  outpad     | c          | 62         | X16Y3    | BIDIR    | $iopadmap$helloworldfpga.c
  outpad     | d          | 63         | X18Y3    | BIDIR    | $iopadmap$helloworldfpga.d
  outpad     | e          | 61         | X20Y3    | BIDIR    | $iopadmap$helloworldfpga.e
  outpad     | f          | 59         | X24Y3    | BIDIR    | $iopadmap$helloworldfpga.f
  outpad     | g          | 57         | X26Y3    | BIDIR    | $iopadmap$helloworldfpga.g

6. Executing Verilog backend.
Dumping module `\helloworldfpga'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_0 for cells of type logic_0.
No more expansions possible.
<suppressed ~1 debug messages>

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template dff for cells of type dff.
Using template $paramod\LUT3\INIT=9'000000001\EQN=8'00110000 for cells of type LUT3.
Using template $paramod$a3585111a807d9eb68f35b3cdf72c072f00fd2ee\LUT2 for cells of type LUT2.
Using template $paramod\LUT1\INIT=1'1\EQN=675885097 for cells of type LUT1.
Using template $paramod$bf21fee4b6975de7353dd955d4b3a8eef751c7c5\LUT2 for cells of type LUT2.
Using template $paramod$8ec3083c78151c28b65d6aa206d62ef0216666fd\LUT3 for cells of type LUT3.
Using template $paramod$e7e37961662412d7dd1961919c60cc96c5b16f01\LUT2 for cells of type LUT2.
Using template $paramod$3d8b5074d7a57ec09a018a5522f0514962b45f9f\LUT3 for cells of type LUT3.
Using template $paramod$eeee1672d7bde8ce8d35c9fa7b64c7ed37aaf2cb\LUT4 for cells of type LUT4.
Using template $paramod$c7902f6766bc35b582775d196881d8d69be8cbc1\LUT4 for cells of type LUT4.
Using template $paramod$1afc89537ee5f3f94914f73379ca86af781a134c\LUT4 for cells of type LUT4.
Using template $paramod$5312816914ac0257eca33ac3be87fd42e64349ca\LUT3 for cells of type LUT3.
Using template $paramod$85c710d2c6083b8966f470930cae8dbf38a074b9\LUT4 for cells of type LUT4.
Using template $paramod$5fff4eed3dfe46da722c8abfad4e43b106987cbf\LUT3 for cells of type LUT3.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod$63af56baac0b73c9058593578f9eb22b007f63ee\LUT4 for cells of type LUT4.
Using template $paramod$4bc6a108ffb0e9551a1470dcb64d43704f64b327\LUT4 for cells of type LUT4.
Using template $paramod$0bac8de66bcfb448c202f31a4c603d45054ce4da\LUT4 for cells of type LUT4.
Using template $paramod$b8e400b0c524196854471b6867fb4998e798de7d\LUT3 for cells of type LUT3.
Using template $paramod$84a600533b20a04155f918b160054cdb2eedf590\LUT4 for cells of type LUT4.
Using template $paramod$1f22ed6c7002e8d2949c35b69b42d33f3d67af46\LUT4 for cells of type LUT4.
Using template $paramod$31e7ef48236adb2982fb47e1f6f9d00d2ed9db93\LUT4 for cells of type LUT4.
Using template dffe for cells of type dffe.
Using template $paramod$805fd21a999b47608a90f78eccd83b6ccec6cdc0\LUT4 for cells of type LUT4.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$0dee8c45763e54f30353b4988d9129c450b64183\LUT3 for cells of type LUT3.
Using template $paramod$8a2feb93738ef18b8c10b1072c54f2f90a829eaa\LUT3 for cells of type LUT3.
Using template $paramod$0d57a20297f7d814347a60e796eb37c1dbe1a686\LUT3 for cells of type LUT3.
Using template $paramod$eaa5b8ce31b5b445eaa93b247abc2c39669e1302\LUT3 for cells of type LUT3.
Using template $paramod$03eed137224500a5a8c1bb8d02f1b39dd96a7b82\LUT2 for cells of type LUT2.
Using template $paramod$ef89328d7363dd7125c1eba8428f7d9cbe4f3212\LUT2 for cells of type LUT2.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\outpad for cells of type outpad.
Using template $paramod$88388c6c6a4eecfc7de7604fe66ccab36e5a053a\LUT2 for cells of type LUT2.
Using template $paramod$730adfb485ed6cef87eb6b434905db0ddfa9b600\LUT2 for cells of type LUT2.
Using template $paramod$d8b4ab69a8b5413c066ad38d899c9d4a3dedc93a\outpad for cells of type outpad.
Using template $paramod$d6994d0c267e294db2ae8ab4933a797e47cb57af\LUT3 for cells of type LUT3.
Using template $paramod$7e4bd054dbbe83c893326033e721a854d7384b31\LUT3 for cells of type LUT3.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod$60512bc3a8de051e95ae08443c3979dfecc7937e\LUT3 for cells of type LUT3.
Using template $paramod$4da62a2f3593426548f45892aaeb7356ad46a6a4\outpad for cells of type outpad.
Using template $paramod$72dd4379b7d27e2d3f8bb7b284d236064f19b288\LUT3 for cells of type LUT3.
Using template mux4x0 for cells of type mux4x0.
Using template $paramod$fa3380cd31d3eaf3369d75f1d1b91f2cba5e8470\outpad for cells of type outpad.
Using template $paramod$666d57638572eef64b702648a4829c6da6ea5f7a\outpad for cells of type outpad.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\outpad for cells of type outpad.
No more expansions possible.
<suppressed ~707 debug messages>

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/data/data/com.termux/files/home/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module helloworldfpga.
<suppressed ~460 debug messages>

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \helloworldfpga..
Removed 0 unused cells and 165 unused wires.
<suppressed ~1 debug messages>

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== helloworldfpga ===

   Number of wires:               1314
   Number of wire bits:           1431
   Number of public wires:        1285
   Number of public wire bits:    1285
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                147
     ASSP                            1
     BIDIR_CELL                      7
     C_FRAG                         20
     F_FRAG                          1
     Q_FRAG                         35
     T_FRAG                         83

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\helloworldfpga'.

Warnings: 9 unique messages, 12 total
End of script. Logfile hash: 934a077f05, CPU: user 8.20s system 0.30s, MEM: 260.26 MB peak
Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 10.2.1-6 -fPIC -Os)
Time spent: 54% 18x read_verilog (4 sec), 8% 26x opt_clean (0 sec), ...
